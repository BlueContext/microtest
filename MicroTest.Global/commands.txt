sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io
sudo usermod -aG docker kbaker

Import-Module ADDSDeployment
Install-ADDSForest -CreateDnsDelegation:$false -DatabasePath C:\Windows\NTDS -DomainMode WinThreshold -DomainName kosmopress.com -DomainNetbiosName KOSMOPRESS -ForestMode WinThreshold -InstallDns:$true -LogPath C:\Windows\NTDS -NoRebootOnCompletion:$true -SysVolPath C:\Windows\SYSVOL -Force:$true

docker swarm init --advertise-addr 10.0.0.11:2377 --listen-addr 10.0.0.11:2377
docker swarm join --token SWMTKN-1-5qul7alg1plqk5ew0a86vsdmngh2wlbg1exsh6cx57efeks0x4-24dtkncz4ga3ngaly12al1eoe 10.0.0.11:2377 --advertise-addr 10.0.0.12:2377 --listen-addr 10.0.0.12:2377
docker swarm join --token SWMTKN-1-5qul7alg1plqk5ew0a86vsdmngh2wlbg1exsh6cx57efeks0x4-24dtkncz4ga3ngaly12al1eoe 10.0.0.11:2377 --advertise-addr 10.0.0.13:2377 --listen-addr 10.0.0.13:2377

docker swarm join --token SWMTKN-1-5qul7alg1plqk5ew0a86vsdmngh2wlbg1exsh6cx57efeks0x4-d1pdxrxudg79lfubvo1ktan54 10.0.0.13:2377 --advertise-addr 10.0.0.14:2377 --listen-addr 10.0.0.14:2377
docker swarm join --token SWMTKN-1-5qul7alg1plqk5ew0a86vsdmngh2wlbg1exsh6cx57efeks0x4-d1pdxrxudg79lfubvo1ktan54 10.0.0.13:2377 --advertise-addr 10.0.0.15:2377 --listen-addr 10.0.0.15:2377
docker swarm join --token SWMTKN-1-5qul7alg1plqk5ew0a86vsdmngh2wlbg1exsh6cx57efeks0x4-d1pdxrxudg79lfubvo1ktan54 10.0.0.13:2377 --advertise-addr 10.0.0.16:2377 --listen-addr 10.0.0.16:2377

docker network create -d overlay ms-overlay --subnet 10.10.10.0/24

docker build -t microtest.api .
docker build -t microtest.fileapi .

docker push

docker service create -d -p 8080:15672 --name mt-mq --replicas 1 --network ms-overlay rabbitmq:3-management
docker service create -d -p 8081:80 -p 8082:5000 --name mt-api --replicas 1 --network ms-overlay microtest.api:latest
docker service create -d -p 8088:80 -p 8089:5000 --name mt-fileapi --replicas 1 --network ms-overlay microtest.fileapi:latest

gMSA Properties
Name:	WinDockerSwarm
DnsHostName: WinDockerSwarm.kosmopress.com 
SPNs:	"host/WinDockerSwarm", "host/WinDockerSwarm.kosmopress.com"
PrincipalsAllowedToRetrieveManagedPassword: DockerHosts


Get-KdsRootKey
#if none,
Add-KdsRootKey -EffectiveTime (Get-Date).AddHours(-10)
#or, in prd,
Add-KdsRootKey -EffectiveImmediately

#Create security group
New-AdGroup -Name "WebApp01Hosts" -SamAccountName "WebApp01Hosts" -Scope DomainLocal

# Create the gMSA
New-ADServiceAccount -Name "WinDockerSwarm" -DnsHostName "WinDockerSwarm.kosmopress.com" -ServicePrincipalNames "host/WinDockerSwarm", "host/WinDockerSwarm.kosmopress.com" -PrincipalsAllowedToRetrieveManagedPassword "DockerHosts"

# Add your container hosts to the security group
Add-ADGroupMember -Identity "WebApp01Hosts" -Members "ContainerHost01", "ContainerHost02", "ContainerHost03"
 
New-SmbShare -Name Drop -Path c:\shares\drop -FullAccess "Everyone"

Install-WindowsFeature RSAT-AD-PowerShell

#Test the account on the container host
Test-ADServiceAccount WebApp01Hosts

#Create a credential spec on each container host
Install-Module CredentialSpec
New-CredentialSpec -AccountName WebApp01Hosts


#Configure your app to use the gMSA
#whatever you want to use the gMSA must run as 'Network Service' inside the container.

#If you're running in IIS inside the container, put this in Dockerfile
RUN (Get-IISAppPool DefaultAppPool).ProcessModel.IdentityType = "NetworkService"


#If it's a Windows Service, put this in Dockerfile
RUN sc.exe config "YourServiceName" obj= "NT AUTHORITY\NETWORK SERVICE" password= ""

#If it's an arbitrary console app (which I believe self-hosted .NET Core is), put this in Dockerfile
USER "NT AUTHORITY\NETWORK SERVICE"

#RUN YOUR CONTAINER WITH A gMSA 
#specify the credential spec file to the --security-opt parameter of docker run
docker run --security-opt "credentialspec=file://contoso_webapp01.json" --hostname webapp01 --rm -it mcr.microsoft.com/windows/servercore:ltsc2019 powershell
#if you want to run a shell as the gMSA:
docker run --security-opt "credentialspec=file://contoso_webapp01.json" --hostname webapp01 --user "NT AUTHORITY\NETWORK SERVICE" --rm -it mcr.microsoft.com/windows/servercore:ltsc2019 powershell


nltest /sc_verify:kosmopress.com

#to verify the gMSA from inside the account
klist get krbtgt